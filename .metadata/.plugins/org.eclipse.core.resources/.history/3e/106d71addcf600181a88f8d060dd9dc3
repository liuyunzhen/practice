package com.taotao.manage.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.taotao.manage.pojo.ContentCategory;
import com.taotao.manage.service.ContentCategoryService;

@Controller
@RequestMapping("content/category")
public class ContentCategoryController {
	@Autowired
	private ContentCategoryService contentCategoryService;

	@RequestMapping(method=RequestMethod.GET)
	public ResponseEntity<List<ContentCategory>> query(@RequestParam(value="id", defaultValue="0")Long parentId){
		try {
			ContentCategory contentCategory = new ContentCategory();
			contentCategory.setParentId(parentId);
			List<ContentCategory> list = contentCategoryService.queryWhere(contentCategory);
			if (list == null) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
			}
			return ResponseEntity.ok(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
	}
	
	@RequestMapping(method=RequestMethod.POST)
	public ResponseEntity<ContentCategory> save(ContentCategory contentCategory){
		try {
			contentCategory.setId(null);
			contentCategory.setIsParent(false);
			contentCategory.setSortOrder(1);
			contentCategory.setStatus(1);
			contentCategoryService.save(contentCategory);
			
			
			ContentCategory category = contentCategoryService.queryById(contentCategory.getParentId());
			if (!category.getIsParent()) {
				category.setIsParent(true);
				contentCategoryService.updateSelective(category);
			}
			
			return ResponseEntity.ok(contentCategory);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(contentCategory);
	}
	
	@RequestMapping(method=RequestMethod.PUT)
	public ResponseEntity<Void> update(ContentCategory contentCategory){
		try {
			contentCategoryService.updateSelective(contentCategory);
			return ResponseEntity.ok().build();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}
	
	public ResponseEntity<Void> delete(ContentCategory contentCategory){
		try {
			List<Object> ids = new ArrayList<Object>();
			ids.add(contentCategory.getId());
			
			getIdsByParentId(ids, contentCategory.getId());
			contentCategoryService.deleteByIds(ContentCategory.class, "id", ids);
			
			ContentCategory record = new ContentCategory();
			record.setParentId(contentCategory.getParentId());
			contentCategoryService.queryWhere(record);
			return ResponseEntity.ok().build();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	private void getIdsByParentId(List<Object> ids, Long id) {
		ContentCategory contentCategory = new ContentCategory();
		contentCategory.setParentId(id);
		List<ContentCategory> list = contentCategoryService.queryWhere(contentCategory);
		for (ContentCategory category : list) {
			ids.add(category.getId());
			if (category.getIsParent()) {
				getIdsByParentId(ids, category.getId());
			}
		}
	}
}
